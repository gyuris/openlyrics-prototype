/**
 * OpenLyrics XML+CSS stylesheet
 * OpenLyrics 0.9
 */

song[version="0.9"] lines:after {
  content: "\A"; 
  white-space: pre-line;
}
song[version="0.9"] lines {
  line-height: 1em;
  padding: 0;
  margin: 0;
}
song[version="0.9"] lines[repeat]::before { /* repeat */
  content: '‖:';
}
song[version="0.9"] lines[repeat]::after {
  content: ':‖×' attr(repeat);
}
song[version="0.9"] beat {
  display: inline-block;
}
song[version="0.9"] beat::after {
  content: '|';
  padding: 0 .1em;
}
song[version="0.9"] beat:last-child::after {
  content: none;
}

/* chords: there are two syntax: 
 * 1st: tradicional <chord name="Em7/D" />
 * 2nd: new         <chord base="Em" ext="7" bass="D" />
 */
song[version="0.9"] chord[name],
song[version="0.9"] chord[base] {
  display: inline-block;
  line-height: 1em;
}
song[version="0.9"] chord[name]::before,
song[version="0.9"] chord[base]::before {
  display: block;
  text-align: left;
  font-weight: bold;
  margin-bottom: -.1em;
  margin-right: .1em;
}
song[version="0.9"] chord[name]::before {
  content: attr(name);
}
song[version="0.9"] chord[base]::before {
  content: attr(base);
}
song[version="0.9"] chord[base][ext]::before {
    content: attr(base) attr(ext);
}
song[version="0.9"] chord[base][bass]::before {
    content: attr(base) "/" attr(bass);
}
song[version="0.9"] chord[base][ext][bass]::before {
    content: attr(base) attr(ext) "/" attr(bass);
}
/* intrument chords */
song[version="0.9"] instrument chord[name]:empty,
song[version="0.9"] instrument chord[base]:empty {
  margin-bottom: 0;
  bottom: 0;
  margin-right: .1em;
}
/* empty */
song[version="0.9"] chord[name]:empty,
song[version="0.9"] chord[base]:empty {
  position: relative;
  bottom: .9em;
  margin-right: -.2em;
}
song[version="0.9"] chord[base]:empty + chord[base]:empty {
  margin-left: .4em;
}
/* upbeat */
song[version="0.9"] chord[name][type=upbeat],
song[version="0.9"] chord[base][type=upbeat] {
  position: relative;
  bottom: .7em;
  height: 1em;
  margin-right: 0 !important;
}
song[version="0.9"] chord[name][type=upbeat]::before,
song[version="0.9"] chord[base][type=upbeat]::before {
  position: absolute;
  right: 0;
}

/* nested chords
 * To normal handling would be necessary CSS4 has:() selector. In CSS3 we need 
 * a tweak... <chord tweak="nested" name="D"><chord name="A">Text<chord>text</chord>
 * First playing chord is D.
 * Displaying is a little bit tricky.
 */
song[version="0.9"] lines chord[name][tweak="nested"],
song[version="0.9"] lines chord[base][tweak="nested"] /*,
song[version="0.9"] lines chord[name]:has(> chord[name]),
song[version="0.9"] lines chord[base]:has(> chord[base]) */ { /* CSS4 selector */
  line-height: 0;
}
song[version="0.9"] lines chord[name][tweak="nested"]::before,
song[version="0.9"] lines chord[base][tweak="nested"]::before /*,
song[version="0.9"] lines chord[name]:has(> chord[name])::before,
song[version="0.9"] lines chord[base]:has(> chord[base])::before */ { /* CSS4 selector */
  display: inline-block;
  width: 100%;
  position: relative;
  top: .5em;
  text-align: right;
}

/* line break in chords
 * To normal handling would be necessary CSS4 has:() selector. In CSS3 we need 
 * a tweak... <chord name="A" tweak="linebreak">Text<br />text</chord>
 */
song[version="0.9"] lines > chord[tweak="linebreak"] /*,
song[version="0.9"] lines > chord:has(> br) */ /* CSS4 selector */ /*,
song[version="0.9"] lines > chord:contains("\A") */ { /* works in Prince? https://www.princexml.com/doc/selectors/#selectors */
  display: inline;
}
song[version="0.9"] lines > chord[tweak="linebreak"]::before {
  position: absolute;
  display: inline-block;
}

/* debug
chord {
  border: .063rem solid silver;
} /* /debug */
